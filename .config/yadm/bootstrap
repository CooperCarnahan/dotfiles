#!/bin/bash

# Save this file as ~/.config/yadm/bootstrap and make it executable. It will
# execute all executable files (excluding templates and editor backups) in the
# ~/.config/yadm/bootstrap.d directory when run.

set -eu

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME" || exit

echo "Init submodules"
yadm submodule update --recursive --init

yes_no() {
	read -r -p "$1 [y/N] " response
	case "$response" in
	[yY][eE][sS] | [yY])
		return 0
		;;
	*)
		return 1
		;;
	esac
}

# install rust
install_cargo() {
	if ! yes_no "Install cargo/rustup?"; then
		return
	fi

	curl https://sh.rustup.rs -sSf | sh
	crates=(zoxide git-delta bat exa starship)
	for crate in "${crates[@]}"; do
		if yes_no "Install '${crate}'?"; then
			cargo install "${crate}"
		fi
	done
}

#install tea
install_tea() {
	if ! yes_no "Install tea?"; then
		return
	fi

	echo "installing tea"
	sh <(curl tea.xyz) --yes
	# packages=(lazygit nvim nushell cmake fd-find)

	# for package in "${packages[@]}"; do
	# 	tea "${package}"
	# done

	# TODO:
	# tea zoxide -- symlink/hardlink this bad boy
	# tea cmake -- symlink/hardlink this bad boy
}

run_platform_specific_boostrap() {
	# Directory to look for bootstrap executables in
	BOOTSTRAP_D="${BASH_SOURCE[0]}.d"

	if [[ ! -d "$BOOTSTRAP_D" ]]; then
		echo "Error: bootstrap directory '$BOOTSTRAP_D' not found" >&2
		exit 1
	fi

	find -L "$BOOTSTRAP_D" -type f | sort | while IFS= read -r bootstrap; do
		if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ "~$" ]]; then
			if ! "$bootstrap"; then
				echo "Error: bootstrap '$bootstrap' failed" >&2
				exit 1
			fi
		fi
	done
}

install_cargo
install_tea
run_platform_specific_boostrap
