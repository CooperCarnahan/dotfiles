{{- if and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.id "ubuntu") -}}
#!/bin/bash
set -euo pipefail

# Define color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Install system dependencies
install_dependencies() {
  log_info "Installing system dependencies..."
  
  # Install software-properties-common first (needed for add-apt-repository)
  sudo apt-get update
  sudo apt-get install -y software-properties-common
  
  # Add Git PPA and install latest Git
  log_info "Installing latest Git version..."
  sudo add-apt-repository -y ppa:git-core/ppa
  sudo apt-get update
  sudo apt-get install -y git
  git_version=$(git --version | awk '{print $3}')
  log_success "Latest Git version $git_version installed"
  
  # Install other dependencies
  sudo apt-get install -y build-essential cmake pkg-config libfreetype6-dev libfontconfig1-dev \
    libxcb-xfixes0-dev libxkbcommon-dev python3 curl unzip gettext libtool libtool-bin \
    autoconf automake ninja-build g++ pkg-config libssl-dev python3-pip python3-pynvim python3-venv
  
  # because fnm and nushell don't play nicely
  log_info "Adding Node.js 23.X LTS"
  curl -fsSL https://deb.nodesource.com/setup_23.x -o ~/nodesource_setup.sh
  sudo -E bash ~/nodesource_setup.sh
  rm ~/nodesource_setup.sh
  
  log_success "System dependencies installed"
}

# Install uv package manager
install_uv() {
  if ! command_exists uv; then
    log_info "Installing uv package manager..."
    curl -LsSf https://astral.sh/uv/install.sh | sh
    
    # Add uv to PATH if not already there
    if [[ -d "$HOME/.cargo/bin" && ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
      echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$HOME/.profile"
      export PATH="$HOME/.cargo/bin:$PATH"
    fi
    
    log_success "uv package manager installed"
  else
    log_info "uv package manager already installed"
    uv --version
  fi
}

# Install pkgx
install_pkgx() {
  if ! command_exists pkgx; then
    log_info "Installing pkgx..."
    curl -fsS https://pkgx.sh | sh
    
    # Source pkgx environment
    if [[ -f "$HOME/.pkgx/env" ]]; then
      source "$HOME/.pkgx/env"
      echo 'source "$HOME/.pkgx/env"' >> "$HOME/.profile"
    fi
    
    log_success "pkgx installed"
  else
    log_info "pkgx already installed"
    pkgx --version
  fi
}

# Install Rust and Cargo if not already installed
install_rust() {
  if ! command_exists cargo; then
    log_info "Installing Rust and Cargo..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    log_success "Rust and Cargo installed"
  else
    log_info "Updating Rust and Cargo..."
    rustup update
    log_success "Rust and Cargo updated"
  fi
}

# Install cargo-update tool
install_cargo_update() {
  # Ensure cargo is in PATH
  source "$HOME/.cargo/env"

  if ! command_exists cargo-install-update; then
    log_info "Installing cargo-update tool..."

    # Install dependencies for cargo-update
    sudo apt-get install -y libssl-dev pkg-config

    # Clone and build cargo-update from source
    git clone https://github.com/nabijaczleweli/cargo-update.git /tmp/cargo-update
    cd /tmp/cargo-update
    cargo build --release
    cp target/release/cargo-install-update "$HOME/.cargo/bin/"
    cp target/release/cargo-install-update-config "$HOME/.cargo/bin/"

    # Clean up
    cd -
    rm -rf /tmp/cargo-update

    log_success "cargo-update installed"
  else
    log_info "cargo-update already installed"
    # Update cargo-update itself
    cargo install-update -a cargo-update
  fi
}

# Install Go if not already installed
install_golang() {
  if ! command_exists go; then
    log_info "Installing Go..."
    GO_VERSION="1.24.2"
    wget "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"
    sudo rm -rf /usr/local/go
    sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
    rm "go${GO_VERSION}.linux-amd64.tar.gz"

    # Set up Go environment variables
    echo 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin' >> "$HOME/.profile"
    export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    log_success "Go installed"
  else
    # There's no built-in Go update mechanism, but we can check the version
    log_info "Go already installed. Check version manually if update needed."
    go version
  fi
}

# Build and install Rust programs
install_rust_programs() {
  # Ensure cargo is in PATH
  source "$HOME/.cargo/env"

  log_info "Building and installing Rust programs..."

  # Define list of Rust programs to install
  # Format: "package_name:binary_name" (use same value for both if they match)
  rust_programs=(
    "ripgrep:rg"
    "yazi-fm:yazi"
    "yazi-cli:yazi"
    "zellij:zellij"
    "git-delta:delta"
    "fd-find:fd"
    "nu:nushell"
    "difftastic:difft"
    "atuin:atuin"
    "zoxide:zoxide"
    "starship:starship"
    "fnm:fnm"
    "bat:bat"
  )

  # Install each Rust program
  for program_pair in "${rust_programs[@]}"; do
    IFS=':' read -r package_name binary_name <<< "$program_pair"

    if ! command_exists "$binary_name"; then
      log_info "Installing $package_name..."
      cargo install "$package_name" --locked
      log_success "$package_name installed"
    else
      log_info "$package_name already installed (will be updated later)"
    fi
  done

  # Update all installed Rust programs at once using cargo-update
  log_info "Checking for updates to Rust programs..."
  cargo install-update -a
  log_success "All Rust programs up to date"
}

# Install Go programs
install_go_programs() {
  log_info "Building and installing Go programs..."

  # Define list of Go programs to install
  # Format: "package_path:binary_name"
  go_programs=(
    "github.com/junegunn/fzf:fzf"
    "github.com/jesseduffield/lazygit:lazygit"
  )

  # Install each Go program
  for program_pair in "${go_programs[@]}"; do
    IFS=':' read -r package_path binary_name <<< "$program_pair"

    if ! command_exists "$binary_name"; then
      log_info "Installing $binary_name..."
      go install "${package_path}@latest"
      log_success "$binary_name installed"
    else
      log_info "Updating $binary_name..."
      go install "${package_path}@latest"
      log_success "$binary_name updated"
    fi
  done
}

# Install or update Neovim using the latest release from GitHub
install_neovim() {
  log_info "Checking Neovim installation..."

  # Get latest Neovim tag from GitHub
  latest_tag=$(curl -s https://api.github.com/repos/neovim/neovim/releases/latest | grep -oP '"tag_name":\s*"\K[^"]*')
  latest_ver="${latest_tag#v}"

  if [ -z "$latest_ver" ]; then
    log_error "Failed to fetch latest Neovim version from GitHub"
    return 1
  fi

  need_install=false

  if ! command_exists nvim; then
    log_info "Neovim not found. Will build and install version $latest_ver"
    need_install=true
  else
    current_ver=$(nvim --version | head -n1 | grep -oP 'v?\K[0-9]+\.[0-9]+\.[0-9]+')
    log_info "Current Neovim version: $current_ver, Latest version: $latest_ver"
    current_ver_normalized="${current_ver#v}"

    # If current_ver < latest_ver, update
    if [ "$(printf '%s\n' "$current_ver_normalized" "$latest_ver" | sort -V | head -n1)" = "$current_ver_normalized" ] && [ "$current_ver_normalized" != "$latest_ver" ]; then
      log_info "Newer version available. Will update to $latest_ver"
      need_install=true
    else
      log_success "Neovim is already at the latest version ($current_ver)"
    fi
  fi

  if [ "$need_install" = true ]; then
    log_info "Building Neovim $latest_ver from source..."

    # Install build dependencies (if not already installed)
    sudo apt-get update
    sudo apt-get install -y ninja-build gettext cmake unzip curl build-essential

    tmpdir=$(mktemp -d)
    cd "$tmpdir"

    # Clone Neovim at the latest tag
    git clone --branch "$latest_tag" --depth 1 https://github.com/neovim/neovim.git
    cd neovim
    git checkout stable

    # Build
    make CMAKE_BUILD_TYPE=RelWithDebInfo

    # Install to ~/.local
    sudo make install

    # Ensure ~/.local/bin is in PATH
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
      echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.profile"
      export PATH="$HOME/.local/bin:$PATH"
    fi

    cd ~
    rm -rf "$tmpdir"

    fnm install --lts

    log_success "Neovim $latest_ver built and installed to ~/.local/bin/nvim"
  fi
  
  # Clone Neovim config repository if it doesn't exist
  NVIM_CONFIG_DIR="$HOME/.config/nvim"
  if [ ! -d "$NVIM_CONFIG_DIR" ]; then
    log_info "Cloning personal Neovim configuration..."
    
    # Create .config directory if it doesn't exist
    mkdir -p "$HOME/.config"
    
    # Clone the repository
    git clone git@github.com:CooperCarnahan/nvim.git "$NVIM_CONFIG_DIR"
    
    log_success "Neovim configuration cloned to $NVIM_CONFIG_DIR"
  else
    log_info "Neovim configuration already exists at $NVIM_CONFIG_DIR"
  fi
}

main() {
  log_info "Starting installation process..."

  install_dependencies
  install_uv
  install_pkgx
  install_rust
  install_cargo_update
  install_golang
  install_rust_programs
  install_go_programs
  install_neovim

  log_success "All installations complete!"
  log_info "Please restart your terminal or run 'source ~/.profile' to apply all changes."
}

main
{{- end }}
